$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - create extension omni_ledger cascade
  - create extension omni_var
  - insert into omni_ledger.ledgers default
    values
    returning omni_var.set_session('ledger_id', id)
  - |
    create function account_flags(daec bool, caed bool) returns text[]
        immutable parallel safe
        language sql as
    $$
    select array_remove(array [case
                                   when daec
                                       then
                                       'debits_allowed_to_exceed_credits'
                                   else null end,
                            case
                                when caed then
                                    'credits_allowed_to_exceed_debits'
                                else null end
                            ], null)
    $$

  - insert into omni_ledger.accounts (ledger_id, debits_allowed_to_exceed_credits, credits_allowed_to_exceed_debits)
    values (omni_var.get_session('ledger_id', null::omni_ledger.ledger_id),
            true, false),
           (omni_var.get_session('ledger_id', null::omni_ledger.ledger_id),
            false, true),
           (omni_var.get_session('ledger_id', null::omni_ledger.ledger_id),
            true, true)
    returning omni_var.set_session('account_id_' || concat_ws(',', variadic
                                                              account_flags(debits_allowed_to_exceed_credits,
                                                                            credits_allowed_to_exceed_debits)), id)
  - create extension dblink
  - select dblink_connect('another_session', 'hostaddr=127.0.0.1 dbname=yregress user=yregress port=' || (select setting
                                                                                                          from pg_settings
                                                                                                          where name = 'port'))

tests:

- name: Transfers require serializable transactions
  steps:
  - query: insert into omni_ledger.transfers (debit_account_id, credit_account_id, amount)
           values (omni_var.get_session('account_id_credits_allowed_to_exceed_debits', null::omni_ledger.account_id),
                   omni_var.get_session('account_id_debits_allowed_to_exceed_credits', null::omni_ledger.account_id),
                   100)
    error: Ledger transfers must be done in a serializable transaction

- name: Serialization allows us to prevent circumvention of rules
  tests:
  - steps:
    - set transaction isolation level serializable
    - name: fund the account to debit from
      query: insert into omni_ledger.transfers (debit_account_id, credit_account_id, amount)
             values (omni_var.get_session('account_id_debits_allowed_to_exceed_credits', null::omni_ledger.account_id),
                     omni_var.get_session('account_id_credits_allowed_to_exceed_debits', null::omni_ledger.account_id),
                     100)
    commit: true
  - name: New transaction
    steps:
    - set transaction isolation level serializable
    - name: Make first successful transfer
      query: insert into omni_ledger.transfers (debit_account_id, credit_account_id, amount)
             values (omni_var.get_session('account_id_credits_allowed_to_exceed_debits', null::omni_ledger.account_id),
                     omni_var.get_session('account_id_debits_allowed_to_exceed_credits', null::omni_ledger.account_id),
                     100)
    - name: Enter a transaction in another session
      query: select dblink_exec('another_session', 'begin transaction isolation level serializable')
    - name: Make a parallel successful transfer
      query: select dblink_exec('another_session', format('insert into omni_ledger.transfers (debit_account_id, credit_account_id, amount)
             values (omni_ledger.account_id(%L), omni_ledger.account_id(%L), 100)',
                                                          omni_var.get_session(
                                                                  'account_id_credits_allowed_to_exceed_debits',
                                                                  null::omni_ledger.account_id),
                                                          omni_var.get_session(
                                                                  'account_id_debits_allowed_to_exceed_credits',
                                                                  null::omni_ledger.account_id)))
    - name: Commit the other session
      query: select dblink_exec('another_session', 'commit')
    - name: Commit
      query: commit
      error: could not serialize access due to read/write dependencies among transactions

- name: Account closing can only happen in a serializable transaction
  query: |
    update omni_ledger.accounts
    set closed = true
    where id = omni_var.get_session('account_id_debits_allowed_to_exceed_credits', null::omni_ledger.account_id)
  error: account closure must be done in a serializable transaction