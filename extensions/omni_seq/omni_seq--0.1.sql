-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int16_int16";

create function "prefix_seq_int16_int16_in"(cstring) returns "prefix_seq_int16_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int16_out"("prefix_seq_int16_int16") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int16_send"("prefix_seq_int16_int16") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int16_recv"(internal) returns "prefix_seq_int16_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int16_int16"
(
    input = "prefix_seq_int16_int16_in",
    output = "prefix_seq_int16_int16_out",
    internallength = 4,
    alignment = int4 ,
    send = "prefix_seq_int16_int16_send",
    receive = "prefix_seq_int16_int16_recv"
);

create function "prefix_seq_int16_int16_eq"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_neq"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_leq"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_lt"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_geq"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_gt"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int16_cmp"("prefix_seq_int16_int16", "prefix_seq_int16_int16") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int16_nextval"("int2", "regclass") returns "prefix_seq_int16_int16" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int16_int16_eq",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int16_int16_neq",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int16_int16_lt",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int16_int16_gt",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int16_int16_leq",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int16_int16_geq",
    leftarg = "prefix_seq_int16_int16",
    rightarg = "prefix_seq_int16_int16",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int16_int16_ops"
    default for type "prefix_seq_int16_int16"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int16_int16_cmp"("prefix_seq_int16_int16", "prefix_seq_int16_int16");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int16_int32";

create function "prefix_seq_int16_int32_in"(cstring) returns "prefix_seq_int16_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int32_out"("prefix_seq_int16_int32") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int32_send"("prefix_seq_int16_int32") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int32_recv"(internal) returns "prefix_seq_int16_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int16_int32"
(
    input = "prefix_seq_int16_int32_in",
    output = "prefix_seq_int16_int32_out",
    internallength = 6,
    alignment = int2 ,
    send = "prefix_seq_int16_int32_send",
    receive = "prefix_seq_int16_int32_recv"
);

create function "prefix_seq_int16_int32_eq"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_neq"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_leq"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_lt"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_geq"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_gt"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int32_cmp"("prefix_seq_int16_int32", "prefix_seq_int16_int32") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int32_nextval"("int2", "regclass") returns "prefix_seq_int16_int32" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int16_int32_eq",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int16_int32_neq",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int16_int32_lt",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int16_int32_gt",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int16_int32_leq",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int16_int32_geq",
    leftarg = "prefix_seq_int16_int32",
    rightarg = "prefix_seq_int16_int32",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int16_int32_ops"
    default for type "prefix_seq_int16_int32"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int16_int32_cmp"("prefix_seq_int16_int32", "prefix_seq_int16_int32");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int16_int64";

create function "prefix_seq_int16_int64_in"(cstring) returns "prefix_seq_int16_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int64_out"("prefix_seq_int16_int64") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int64_send"("prefix_seq_int16_int64") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int64_recv"(internal) returns "prefix_seq_int16_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int16_int64"
(
    input = "prefix_seq_int16_int64_in",
    output = "prefix_seq_int16_int64_out",
    internallength = 10,
    alignment = int2 ,
    send = "prefix_seq_int16_int64_send",
    receive = "prefix_seq_int16_int64_recv"
);

create function "prefix_seq_int16_int64_eq"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_neq"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_leq"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_lt"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_geq"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_gt"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int16_int64_cmp"("prefix_seq_int16_int64", "prefix_seq_int16_int64") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int16_int64_nextval"("int2", "regclass") returns "prefix_seq_int16_int64" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int16_int64_eq",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int16_int64_neq",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int16_int64_lt",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int16_int64_gt",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int16_int64_leq",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int16_int64_geq",
    leftarg = "prefix_seq_int16_int64",
    rightarg = "prefix_seq_int16_int64",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int16_int64_ops"
    default for type "prefix_seq_int16_int64"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int16_int64_cmp"("prefix_seq_int16_int64", "prefix_seq_int16_int64");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int32_int16";

create function "prefix_seq_int32_int16_in"(cstring) returns "prefix_seq_int32_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int16_out"("prefix_seq_int32_int16") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int16_send"("prefix_seq_int32_int16") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int16_recv"(internal) returns "prefix_seq_int32_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int32_int16"
(
    input = "prefix_seq_int32_int16_in",
    output = "prefix_seq_int32_int16_out",
    internallength = 6,
    alignment = int2 ,
    send = "prefix_seq_int32_int16_send",
    receive = "prefix_seq_int32_int16_recv"
);

create function "prefix_seq_int32_int16_eq"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_neq"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_leq"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_lt"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_geq"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_gt"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int16_cmp"("prefix_seq_int32_int16", "prefix_seq_int32_int16") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int16_nextval"("int4", "regclass") returns "prefix_seq_int32_int16" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int32_int16_eq",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int32_int16_neq",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int32_int16_lt",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int32_int16_gt",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int32_int16_leq",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int32_int16_geq",
    leftarg = "prefix_seq_int32_int16",
    rightarg = "prefix_seq_int32_int16",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int32_int16_ops"
    default for type "prefix_seq_int32_int16"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int32_int16_cmp"("prefix_seq_int32_int16", "prefix_seq_int32_int16");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int32_int32";

create function "prefix_seq_int32_int32_in"(cstring) returns "prefix_seq_int32_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int32_out"("prefix_seq_int32_int32") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int32_send"("prefix_seq_int32_int32") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int32_recv"(internal) returns "prefix_seq_int32_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int32_int32"
(
    input = "prefix_seq_int32_int32_in",
    output = "prefix_seq_int32_int32_out",
    internallength = 8,
    alignment = double ,
    send = "prefix_seq_int32_int32_send",
    receive = "prefix_seq_int32_int32_recv"
);

create function "prefix_seq_int32_int32_eq"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_neq"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_leq"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_lt"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_geq"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_gt"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int32_cmp"("prefix_seq_int32_int32", "prefix_seq_int32_int32") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int32_nextval"("int4", "regclass") returns "prefix_seq_int32_int32" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int32_int32_eq",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int32_int32_neq",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int32_int32_lt",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int32_int32_gt",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int32_int32_leq",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int32_int32_geq",
    leftarg = "prefix_seq_int32_int32",
    rightarg = "prefix_seq_int32_int32",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int32_int32_ops"
    default for type "prefix_seq_int32_int32"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int32_int32_cmp"("prefix_seq_int32_int32", "prefix_seq_int32_int32");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int32_int64";

create function "prefix_seq_int32_int64_in"(cstring) returns "prefix_seq_int32_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int64_out"("prefix_seq_int32_int64") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int64_send"("prefix_seq_int32_int64") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int64_recv"(internal) returns "prefix_seq_int32_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int32_int64"
(
    input = "prefix_seq_int32_int64_in",
    output = "prefix_seq_int32_int64_out",
    internallength = 12,
    alignment = int4 ,
    send = "prefix_seq_int32_int64_send",
    receive = "prefix_seq_int32_int64_recv"
);

create function "prefix_seq_int32_int64_eq"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_neq"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_leq"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_lt"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_geq"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_gt"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int32_int64_cmp"("prefix_seq_int32_int64", "prefix_seq_int32_int64") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int32_int64_nextval"("int4", "regclass") returns "prefix_seq_int32_int64" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int32_int64_eq",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int32_int64_neq",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int32_int64_lt",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int32_int64_gt",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int32_int64_leq",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int32_int64_geq",
    leftarg = "prefix_seq_int32_int64",
    rightarg = "prefix_seq_int32_int64",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int32_int64_ops"
    default for type "prefix_seq_int32_int64"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int32_int64_cmp"("prefix_seq_int32_int64", "prefix_seq_int32_int64");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int64_int16";

create function "prefix_seq_int64_int16_in"(cstring) returns "prefix_seq_int64_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int16_out"("prefix_seq_int64_int16") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int16_send"("prefix_seq_int64_int16") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int16_recv"(internal) returns "prefix_seq_int64_int16"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int64_int16"
(
    input = "prefix_seq_int64_int16_in",
    output = "prefix_seq_int64_int16_out",
    internallength = 10,
    alignment = int2 ,
    send = "prefix_seq_int64_int16_send",
    receive = "prefix_seq_int64_int16_recv"
);

create function "prefix_seq_int64_int16_eq"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_neq"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_leq"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_lt"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_geq"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_gt"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int16_cmp"("prefix_seq_int64_int16", "prefix_seq_int64_int16") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int16_nextval"("int8", "regclass") returns "prefix_seq_int64_int16" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int64_int16_eq",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int64_int16_neq",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int64_int16_lt",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int64_int16_gt",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int64_int16_leq",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int64_int16_geq",
    leftarg = "prefix_seq_int64_int16",
    rightarg = "prefix_seq_int64_int16",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int64_int16_ops"
    default for type "prefix_seq_int64_int16"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int64_int16_cmp"("prefix_seq_int64_int16", "prefix_seq_int64_int16");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int64_int32";

create function "prefix_seq_int64_int32_in"(cstring) returns "prefix_seq_int64_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int32_out"("prefix_seq_int64_int32") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int32_send"("prefix_seq_int64_int32") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int32_recv"(internal) returns "prefix_seq_int64_int32"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int64_int32"
(
    input = "prefix_seq_int64_int32_in",
    output = "prefix_seq_int64_int32_out",
    internallength = 12,
    alignment = int4 ,
    send = "prefix_seq_int64_int32_send",
    receive = "prefix_seq_int64_int32_recv"
);

create function "prefix_seq_int64_int32_eq"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_neq"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_leq"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_lt"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_geq"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_gt"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int32_cmp"("prefix_seq_int64_int32", "prefix_seq_int64_int32") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int32_nextval"("int8", "regclass") returns "prefix_seq_int64_int32" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int64_int32_eq",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int64_int32_neq",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int64_int32_lt",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int64_int32_gt",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int64_int32_leq",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int64_int32_geq",
    leftarg = "prefix_seq_int64_int32",
    rightarg = "prefix_seq_int64_int32",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int64_int32_ops"
    default for type "prefix_seq_int64_int32"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int64_int32_cmp"("prefix_seq_int64_int32", "prefix_seq_int64_int32");

-- DO NOT EDIT THIS FILE, AUTOGENERATED
create type "prefix_seq_int64_int64";

create function "prefix_seq_int64_int64_in"(cstring) returns "prefix_seq_int64_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int64_out"("prefix_seq_int64_int64") returns cstring
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int64_send"("prefix_seq_int64_int64") returns bytea
as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int64_recv"(internal) returns "prefix_seq_int64_int64"
as
'MODULE_PATHNAME' language c immutable
                             strict;

create type "prefix_seq_int64_int64"
(
    input = "prefix_seq_int64_int64_in",
    output = "prefix_seq_int64_int64_out",
    internallength = 16,
    alignment = double ,
    send = "prefix_seq_int64_int64_send",
    receive = "prefix_seq_int64_int64_recv"
);

create function "prefix_seq_int64_int64_eq"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_neq"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_leq"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_lt"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_geq"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_gt"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns boolean as
'MODULE_PATHNAME' language c immutable
                             strict;
create function "prefix_seq_int64_int64_cmp"("prefix_seq_int64_int64", "prefix_seq_int64_int64") returns int as
'MODULE_PATHNAME' language c immutable
                             strict;

create function "prefix_seq_int64_int64_nextval"("int8", "regclass") returns "prefix_seq_int64_int64" as
'MODULE_PATHNAME' language c;

create operator = (
    procedure = "prefix_seq_int64_int64_eq",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = =,
    negator = <>,
    restrict = eqsel,
    join = eqjoinsel,
    merges,
    hashes
    );

create operator <> (
    procedure = "prefix_seq_int64_int64_neq",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = <>,
    negator = =,
    restrict = neqsel,
    join = neqjoinsel
    );

create operator < (
    procedure = "prefix_seq_int64_int64_lt",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = >,
    negator = >=,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator > (
    procedure = "prefix_seq_int64_int64_gt",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = <,
    negator = <=,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator <= (
    procedure = "prefix_seq_int64_int64_leq",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = >=,
    negator = >,
    restrict = scalarltsel,
    join = scalarltjoinsel
    );

create operator >= (
    procedure = "prefix_seq_int64_int64_geq",
    leftarg = "prefix_seq_int64_int64",
    rightarg = "prefix_seq_int64_int64",
    commutator = <=,
    negator = <,
    restrict = scalargtsel,
    join = scalargtjoinsel
    );

create operator class "prefix_seq_int64_int64_ops"
    default for type "prefix_seq_int64_int64"
    using btree
    as
    operator 1 <,
    operator 2 <=,
    operator 3 =,
    operator 4 >= ,
    operator 5 > ,
    function 1 "prefix_seq_int64_int64_cmp"("prefix_seq_int64_int64", "prefix_seq_int64_int64");


create function system_identifier() returns bigint
as
'MODULE_PATHNAME' language c immutable;