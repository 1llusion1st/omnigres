instances:
  main:
    default: true
  aux:
tests:

- name: simple query
  query: select true as result
  results:
  - result: t

- name: failure
  query: selec 1
  success: false

- name: error
  query: selec 1
  success: false
  error:
    severity: ERROR
    message: syntax error at or near "selec"

# This test should not affect the one below, as it is wrapped
# into a transaction by default
- name: create a table
  query: create table a()

# See above
- name: the table should not exist
  query: select count(*) = 1 as exists from pg_class where relname = 'a'
  results:
  - exists: f

- name: save value as anchor
  query: select 1 as v
  results:
  - v: &v 1

- name: use a reference to test against previously set value
  query: select 1 as v
  results:
  - v: *v

- name: query parameters
  query: select $1 as v
  params:
  - &p text
  results:
  - v: *p

- name: multistep
  steps:
  - name: create table
    query: create table tab as (select generate_series(1,10) as i);
  - name: query table
    query: select count(*) from tab
    results:
    - count: 10

- name: multistep's table should not exist
  query: select count(*) = 1 as exists from pg_class where relname = 'tab'
  results:
  - exists: f

- name: nested multistep
  steps:
  - steps:
    - query: create table nested_tab()
  - query: select count(*) = 1 as exists from pg_class where relname = 'nested_tab'
    results:
    - exists: t

- name: null
  query: select null::integer as result
  results:
  - result: null

- name: notices
  query: |
    do $$
      begin
        raise notice 'test 1';
        raise notice 'test 2';
      end;
    $$ language plpgsql
  notices:
  - test 1
  - test 2

- name: multi-step notices
  steps:
  - query: |
      do $$
        begin
          raise notice 'test 1';
        end;
      $$ language plpgsql
  - query: |
      do $$
        begin
          raise notice 'test 2';
        end;
      $$ language plpgsql
  notices:
  - test 1
  - test 2

- name: multi-step notices (individual)
  steps:
  - query: |
      do $$
        begin
          raise notice 'test 1';
        end;
      $$ language plpgsql
    notices:
    - test 1
  - query: |
      do $$
        begin
          raise notice 'test 2';
        end;
      $$ language plpgsql
    notices:
    - test 2
  # Ensure no notices get here
  notices: [ ]

- name: binary format
  query: select true as value
  binary: true
  results:
  - value: 0x01

- name: binary format
  query: select $1::bool as value
  binary: true
  params:
  - 0x01
  results:
  - value: 0x01

- name: binary format for params
  query: select $1::bool as value
  binary: params
  params:
  - 0x01
  results:
  - value: t

- name: binary format for results
  query: select $1::bool as value
  binary: results
  params:
  - true
  results:
  - value: 0x01

- name: non-hexadecimal binary format for params
  query: select $1::text as value
  binary: params
  params:
  # This is supplied as a binary, but it's not hex
  - hello
  results:
  - value: hello
